{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Aula05_if_elif_else.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cki_m5E_oPDT"
      },
      "source": [
        "**Testando uma condição** Se a condição for verdadeira, executa o que está indentado"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fku6cKYpmYC9"
      },
      "source": [
        "#Comparando valores\n",
        "var_a = 40\n",
        "if  var_a > 30:\n",
        "  print(\"É maior que 30\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ywJBPhnToe6C"
      },
      "source": [
        "**IF, ELSE** Testa uma condição, se for falsa executa o que está em \"else\". Quando testa strings, ele é \"case sensitive\" (diferencia maiúsculas de minúsculas)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kjNy3wgEnLd_"
      },
      "source": [
        "nome = input(\"Digite seu nome: \")\n",
        "\n",
        "# Testar se a string é exatamente igual\n",
        "if nome == \"Filipe\":\n",
        "  print(\"Você é o Filipe!\")\n",
        "else:\n",
        "  print(\"Você não é o Filipe!\")\n",
        "\n",
        "# Testar independente de maiúsculas e minúsculas \n",
        "if nome.upper() == \"FILIPE\":\n",
        "  print(\"Você é o Filipe!\")\n",
        "else:\n",
        "  print(\"Você não é o Filipe!\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oxlGWE5LntF3"
      },
      "source": [
        "**IF, ELIF, ELSE:** Se, senão se, senão. Testa a primeira condição (if), se ela for falsa testa a segunda (elif), se for falsa também, resolve a última (else)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T_S8tsYbnI2W"
      },
      "source": [
        "var_a = input(\"Digite num1: \")\n",
        "var_b = input(\"Digite num2: \")\n",
        "\n",
        "if var_a > var_b:\n",
        "  print(\"A é maior que B\")\n",
        "elif var_a < var_b: #senão se\n",
        "  print(\"B é maior que A\")\n",
        "else: \n",
        "  print(\"são iguais\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PNJx3E6rnNBP"
      },
      "source": [
        "#O aluno ficou de recuperação?\n",
        "nota = float(input(\"Digite a média final: \"))\n",
        "\n",
        "#Se media >= 7: aprovado, se for entre 5 e 6.9, recuperação, entre 4 e 4.9, conselho de classe,\n",
        "#se for menor que 3.9, reprovado\n",
        "\n",
        "#Modo 1\n",
        "if nota >= 7:\n",
        "  print(\"O aluno está aprovado!\")\n",
        "elif 4 <= nota <= 4.9:\n",
        "  print(\"Conselho de classe\")\n",
        "elif nota < 4:\n",
        "  print(\"O aluno está reprovado!\")\n",
        "else:\n",
        "  print(\"O aluno está em recuperação\")\n",
        "\n",
        "#Modo 2\n",
        "if nota >= 7:   \n",
        "  print(\"O aluno está aprovado!\")\n",
        "elif nota >= 4 and nota <= 4.9:   \n",
        "  print(\"Conselho de classe\")\n",
        "elif nota < 4:   \n",
        "  print(\"O aluno está reprovado!\")\n",
        "else:   \n",
        "  print(\"O aluno está em recuperação\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "toHF3VUmnXQx"
      },
      "source": [
        "**If aninhado:** Quando usamos um if dentro de outro. Ele só vai testar a segunda condição se a primeira for verdadeira. <br>\n",
        "Atenção com as indentações!! O segundo if está dentro do primeiro, por isso também está indentado."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PgIxlTe8nOyN"
      },
      "source": [
        "#Se media >= 7: aprovado, se for entre 4 e 6.9, recuperação, se for menor que 3.9, reprovado\n",
        "#if aninhado\n",
        "\n",
        "nota = float(input(\"Digite a média final: \"))\n",
        "\n",
        "if nota < 7:\n",
        "  if nota >= 4:\n",
        "    print(\"O aluno está em recuperação!\")\n",
        "  else:\n",
        "    print(\"O aluno está em reprovado!\")\n",
        "else:\n",
        "  print(\"O aluno está aprovado!\")\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o-88uXQtnSe0"
      },
      "source": [
        "**Exercício 1**: \"Faça um Programa que leia três números inteiros, em seguida mostre o maior e o menor deles.\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bhSKeIM5nRrI",
        "outputId": "aabe1264-a9e8-41ce-cf4f-6dce66b54849"
      },
      "source": [
        "primeiro = int(input('Primeiro numero: '))\n",
        "segundo  = int(input('Segundo numero : '))\n",
        "terceiro = int(input('Terceiro numero: '))\n",
        "\n",
        "# Achando o maior número\n",
        "maior = primeiro\n",
        "\n",
        "if segundo > maior:\n",
        "  maior = segundo\n",
        "if terceiro > maior:\n",
        "  maior = terceiro\n",
        "\n",
        "print('Maior: ',maior)\n",
        "\n",
        "\n",
        "# Achando o menor número\n",
        "menor = primeiro\n",
        "\n",
        "if segundo < menor:\n",
        "  menor = segundo\n",
        "if terceiro < menor:\n",
        "  menor = terceiro\n",
        "\n",
        "print('Menor: ',menor)\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Primeiro numero: 1\n",
            "Segundo numero : 2\n",
            "Terceiro numero: 3\n",
            "Maior:  3\n",
            "Menor:  1\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}